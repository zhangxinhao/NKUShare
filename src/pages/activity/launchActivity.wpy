<template>
  <view>
    <form>
      <view class="cu-form-group margin-top">
        <view class="title">主题</view>
        <input placeholder="请输入活动主题" value="{{title}}" name="input" bindchange="titleChange"/>
      </view>
      <view class="cu-form-group">
        <view class="title">地点</view>
        <input placeholder="请输入活动地点" value="{{location}}" name="input" bindchange="locationChange"/>
      </view>
      <view class="cu-form-group">
        <view class="title">人数上限</view>
        <input
          type="number"
          placeholder="请输入最高参加活动人数"
          value="{{numMax}}"
          name="input"
          bindchange="numMaxChange"
        />
      </view>
      <view class="cu-form-group">
        <view class="title">人数下限</view>
        <input
          type="number"
          placeholder="请输入最低参加活动人数下限"
          value="{{numMin}}"
          name="input"
          bindchange="numMinChange"
        />
      </view>
      <view class="cu-form-group">
        <view class="title">日期选择</view>
        <picker
          mode="date"
          value="{{date}}"
          start="2015-09-01"
          end="2020-09-01"
          @change="DateChange"
        >
          <view class="picker">{{date}}</view>
        </picker>
      </view>
      <view class="cu-form-group">
        <view class="title">开始时间选择</view>
        <picker
          mode="time"
          value="{{startTime}}"
          start="06:00"
          end="24:00"
          @change="StartTimeChange"
        >
          <view class="picker">{{startTime}}</view>
        </picker>
      </view>
      <view class="cu-form-group">
        <view class="title">结束时间选择</view>
        <picker mode="time" value="{{endTime}}" start="06:00" end="24:00" @change="EndTimeChange">
          <view class="picker">{{endTime}}</view>
        </picker>
      </view>
      <view class="cu-form-group">
        <view class="title">报名截止时间选择</view>
        <picker mode="time" value="{{ddlTime}}" start="06:00" end="24:00" @change="DdlTimeChange">
          <view class="picker">{{ddlTime}}</view>
        </picker>
      </view>
      <view class="cu-form-group align-start">
        <view class="title">详细描述</view>
        <textarea
          maxlength="-1"
          disabled="{{modalName!==null}}"
          @input="textareaInput"
          placeholder="多行文本输入框"
          value="{{textareaValue}}"
        ></textarea>
      </view>
    </form>
    <view class="padding flex flex-direction">
      <button class="cu-btn bg-grey lg" @tap="launchConfirm">确认发起</button>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
export default class launchActivity extends wepy.page {
  config = {
    navigationBarTitleText: '发起活动'
  }
  data = {
    useID: '',
    title: '',
    location: '',
    numMax: null,
    numMin: null,
    startTime: '12:00',
    endTime: '12:00',
    ddlTime: '12:00',
    date: new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate(),
    modalName: null,
    textAreaValue: ''
  }

  onLoad() {
    this.userID = this.$parent.globalData.userID
    this.useID = ''
    this.title = ''
    this.location = ''
    this.numMax = null
    this.numMin = null
    this.startTime = '12:00'
    this.endTime = '12:00'
    this.ddlTime = '12:00'
    this.date = new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate()
    this.modalName = null
    this.textAreaValue = ''
  }

  onUnload() {
  }

  methods = {
    launchConfirm(e) {
      // 显示loading提示框
      if (!this.validateInfo()) {
        return
      }
      wx.showLoading({
        title: '活动创建中',
        // 防止触摸穿透
        mask: true
      })
      let that = this

      const database = wx.cloud.database({
        env: 'nkushare-kynis'
      })

      const activity = database.collection('activity')
      const takeActivity = database.collection('take_activity')

      activity.add({
        // data 字段表示需新增的 JSON 数据
        data: {
          // _id: 'todo-identifiant-aleatoire', // 可选自定义 _id，在此处场景下用数据库自动分配的就可以了
          description: that.textareaValue,
          title: that.title,
          date: that.date,
          register_end: that.ddlTime,
          begin: that.startTime,
          end: that.endTime,
          location: that.location,
          num_min: that.numMin,
          num_max: that.numMax,
          bonus: 10,
          state: '待生效'
        },
        success(res) {
          // res 是一个对象，其中有 _id 字段标记刚创建的记录的 id
          let activityID = res._id

          takeActivity.add({
            data: {
              act_id: activityID,
              type: 'C',
              userID: that.userID
            },
            success(res) {
              wx.hideLoading()
              wx.showModal({
                title: '亲爱的用户',
                content: '您已创建成功',
                showCancel: false,
                // cancelText: '取消',
                confirmText: '确认',
                success: res => {
                  if (res.confirm) {
                    wx.navigateBack()
                  }
                }
              })
            }
          })
        }
      })
    },
    titleChange(e) {
      this.title = e.detail.value
    },
    locationChange(e) {
      this.location = e.detail.value
    },
    numMaxChange(e) {
      this.numMax = e.detail.value
    },
    numMinChange(e) {
      this.numMin = e.detail.value
    },
    PickerChange(e) {
      this.index = e.detail.value
    },
    StartTimeChange(e) {
      this.startTime = e.detail.value
    },
    EndTimeChange(e) {
      this.endTime = e.detail.value
    },
    DdlTimeChange(e) {
      this.ddlTime = e.detail.value
    },
    DateChange(e) {
      this.date = e.detail.value
    },
    textareaInput(e) {
      this.textareaValue = e.detail.value
    }
  }
  validateInfo() {
    if (this.title === '') {
      wx.showToast({
        title: '创建失败!标题不能为空!',
        icon: 'none',
        duration: 2000
      })
      return false
    }

    // 活动地址为空
    if (this.location === '') {
      wx.showToast({
        title: '创建失败!地址不能为空!',
        icon: 'none',
        duration: 2000
      })
      return false
    }

    // 人数上下限为空
    if (
      this.numMax === null ||
      this.numMin === null ||
      this.numMax === 0 ||
      this.numMin === 0
    ) {
      wx.showToast({
        title: '创建失败!人数不能为空!',
        icon: 'none',
        duration: 2000
      })
      return false
    }

    // 人数上下限大小错误
    if (this.numMax <= this.numMin) {
      wx.showToast({
        title: '创建失败!人数上限应高于下限',
        icon: 'none',
        duration: 2000
      })
      return false
    }

    // 日期过期
    if (
      new Date(this.date).getTime() <
      new Date(new Date().toLocaleDateString()).getTime()
    ) {
      wx.showToast({
        title: '创建失败!日期已过!',
        icon: 'none',
        duration: 2000
      })
      return false
    }

    // 时间过期
    if (
      new Date(this.date + ' ' + this.ddlTime).getTime() <=
        new Date().getTime() ||
      this.endTime <= this.startTime ||
      this.startTime <= this.ddlTime
    ) {
      wx.showToast({
        title: '创建失败!日期不符合规范!',
        icon: 'none',
        duration: 2000
      })
      return false
    }

    // 活动描述为空
    if (this.textareaValue === '') {
      wx.showToast({
        title: '创建失败!活动描述不能为空!',
        icon: 'none',
        duration: 2000
      })
      return false
    }
    return true
  }
}
</script>
